//
//  CompanyListViewController.swift
//  MediquoApp
//
//  Created by Guillem Espejo on 05/11/2020.
//
//  This file was generated by the Guillem Espejo Clean Swift Xcode Templates
//

import UIKit

protocol CompanyListDisplayLogic: class{
    func displayBaseNewtorkData(viewModel: CompanyList.LoadBaseNetworkData.ViewModel)
    func displayBaseNetworkDataError(_ error: Error)
}

class CompanyListViewController: UIViewController{
    
    // ------------------------------------------------------------
    // IBOUTLETS - PROPERTIES
    // ------------------------------------------------------------
    // MARK: - IBOutlets - Properties
    @IBOutlet weak var tableViewCompanies: UITableView!
    
    var interactor: CompanyListBusinessLogic?
    var router: (NSObjectProtocol & CompanyListRoutingLogic & CompanyListDataPassing)?
    
    let searchController = UISearchController(searchResultsController: nil)
    var refreshControl = UIRefreshControl()
    
    // We use typealias to make code less verbose...
    typealias CompanyDataSource = UITableViewDiffableDataSource<Int, CompanyList.DisplayableCompany>
    typealias CompanySnapshot = NSDiffableDataSourceSnapshot<Int, CompanyList.DisplayableCompany>
    
    var tableDataSource : CompanyDataSource!
    var displayableCompanies : [CompanyList.DisplayableCompany] = []
    var filteredDisplayableCompanies : [CompanyList.DisplayableCompany] = []
    
    
    // ------------------------------------------------------------
    // INIT-DEINIT
    // ------------------------------------------------------------
    // MARK: - Init-Deinit
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupCleanComponents()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setupCleanComponents()
    }
    
    private func setupCleanComponents(){
        let viewController = self
        let presenter = CompanyListPresenter(viewController: viewController)
        let interactor = CompanyListInteractor(presenter:presenter)
        let router = CompanyListRouter(viewController: viewController , dataStore: interactor)
        self.interactor = interactor
        self.router = router
    }
    
    // ------------------------------------------------------------
    // ROUTING
    // ------------------------------------------------------------
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // ------------------------------------------------------------
    // LIFECYCLE
    // ------------------------------------------------------------
    // MARK: - Lifecycle
    override func viewDidLoad(){
        super.viewDidLoad()
        setLookAndFeel()
        
        setupTableViewDatasource()

        getBaseNetworkData()
        
    }
    
    // ------------------------------------------------------------
    // LOOK AND FEEL
    // ------------------------------------------------------------
    // MARK: - Look and feel
    private func setLookAndFeel(){
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.showsSearchResultsController = true
        searchController.searchResultsUpdater = self
        searchController.searchBar.placeholder = Resources.Localizable.SearchPlaceholder
    
        definesPresentationContext = true // Avoids some weird UI errors related to searchController
        
        refreshControl.attributedTitle = NSAttributedString(string: Resources.Localizable.PullRefresh )
        refreshControl.addTarget(self, action: #selector(refresh), for: UIControl.Event.valueChanged)

        tableViewCompanies.tableHeaderView = searchController.searchBar
        tableViewCompanies.refreshControl = refreshControl

    }
    
    // ------------------------------------------------------------
    // INTERACTOR CALLS
    // ------------------------------------------------------------
    // MARK: - Interactor Calls
    private func getBaseNetworkData(){
        let request = CompanyList.LoadBaseNetworkData.Request()
        interactor?.loadBaseNetworkData(request: request)
    }


    // ------------------------------------------------------------
    // TABLEVIEW RELATED
    // ------------------------------------------------------------
    // MARK: - Tableview Related
    private func setupTableViewDatasource(){
        self.tableDataSource = CompanyDataSource(tableView: self.tableViewCompanies){
            (tableView, indexPath, company) in
            
            // Use default subtitled cell
            let cell = tableView.dequeueReusableCell(withIdentifier: Constants.ViewId.CompanyCellId, for: indexPath)
            cell.textLabel?.text = company.companyName
            cell.detailTextLabel?.text = company.networkName
            return cell
        }
         
        self.tableViewCompanies.dataSource = self.tableDataSource
    }
    
    private func applySnapshot(animatingDifferences: Bool = true) {
        var snapshot = CompanySnapshot()
        snapshot.appendSections([0]) //Int array, at least it needs a single section
        snapshot.appendItems( self.filteredDisplayableCompanies )
        self.tableDataSource.apply(snapshot, animatingDifferences: animatingDifferences)
        
    }
    
    @objc func refresh(_ sender: AnyObject) {
        getBaseNetworkData()
    }
    
}

// ------------------------------------------------------------
// PRESENTER OUTPUTS
// ------------------------------------------------------------
// MARK: - Presenter Outputs
extension CompanyListViewController : CompanyListDisplayLogic {
    func displayBaseNewtorkData(viewModel: CompanyList.LoadBaseNetworkData.ViewModel){
        //Display result
        self.displayableCompanies = viewModel.companyList
        self.filteredDisplayableCompanies = displayableCompanies
        refreshControl.endRefreshing()
        
        applySnapshot()
    }
    
    func displayBaseNetworkDataError(_ error: Error){
        refreshControl.endRefreshing()

        // We wait a bit because refreshControl gets stuck if the modal controller
        // gets presented before it finishes its animnations...
        DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(750),
                                      execute: {
                                        self.router?.routeToErrorAlert(error)
                                      } )
        
    }
}

// ------------------------------------------------------------
// DATA SEARCHING
// ------------------------------------------------------------
// MARK: - Data Searching
extension CompanyListViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        if let text = searchController.searchBar.text, !text.isEmpty {
            let lowered = text.lowercased()
            filteredDisplayableCompanies = displayableCompanies.filter { displayable in
                let company = displayable.companyName.lowercased()
                let network = displayable.networkName.lowercased()
                return company.contains(lowered) || network.contains(lowered)
            }
           
        } else {
            filteredDisplayableCompanies = displayableCompanies
        }
        
        applySnapshot()
    }
}

