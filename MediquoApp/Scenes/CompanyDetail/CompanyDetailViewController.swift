//
//  CompanyDetailViewController.swift
//  MediquoApp
//
//  Created by Guillem Espejo on 05/11/2020.
//
//  This file was generated by the Guillem Espejo Clean Swift Xcode Templates
//

import UIKit

protocol CompanyDetailDisplayLogic: class{
    func displayCompanyData(viewModel: CompanyDetail.LoadCompanyData.ViewModel)
    func displayStationData(viewModel: CompanyDetail.LoadStationData.ViewModel)
    func displayStationError(_ error:Error)
}

class CompanyDetailViewController: UIViewController{
    
    
    // ------------------------------------------------------------
    // IBOUTLETS - PROPERTIES
    // ------------------------------------------------------------
    // MARK: - IBOutlets - Properties
    @IBOutlet weak var barButtonRefresh: UIBarButtonItem!
    @IBOutlet weak var imageFlag: UIImageView!
    @IBOutlet weak var tableViewStations: UITableView!
    @IBOutlet weak var labelCity: UILabel!
    @IBOutlet weak var viewNoResults: UIView!
    @IBOutlet weak var labelCoordinates: UILabel!
    
    @IBOutlet weak var viewLoading: UIView!
    
    var interactor: CompanyDetailBusinessLogic?
    var router: (NSObjectProtocol & CompanyDetailRoutingLogic & CompanyDetailDataPassing)?
    
    // We use typealias to make code less verbose...
    typealias StationDataSource = UITableViewDiffableDataSource<Int, CompanyDetail.DisplayableStation>
    typealias StationSnapshot = NSDiffableDataSourceSnapshot<Int, CompanyDetail.DisplayableStation>
    
    var tableDataSource : StationDataSource!
    var displayableStations : [CompanyDetail.DisplayableStation] = []
    
    // ------------------------------------------------------------
    // INIT-DEINIT
    // ------------------------------------------------------------
    // MARK: - Init-Deinit
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupCleanComponents()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setupCleanComponents()
    }
    
    private func setupCleanComponents(){
        let viewController = self
        let presenter = CompanyDetailPresenter(viewController: viewController)
        let interactor = CompanyDetailInteractor(presenter:presenter)
        let router = CompanyDetailRouter(viewController: viewController , dataStore: interactor)
        self.interactor = interactor
        self.router = router
    }
    
    // ------------------------------------------------------------
    // ROUTING
    // ------------------------------------------------------------
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // ------------------------------------------------------------
    // LIFECYCLE
    // ------------------------------------------------------------
    // MARK: - Lifecycle
    override func viewDidLoad(){
        super.viewDidLoad()
        
        setLookAndFeel()
        
        setupTableViewDatasource()
        getCompanyData()

    }
    
    // ------------------------------------------------------------
    // LOOK AND FEEL
    // ------------------------------------------------------------
    // MARK: - Look and feel
    private func setLookAndFeel(){
        self.viewNoResults.isHidden = true
        self.viewLoading.isHidden = true
    }
    
    // ------------------------------------------------------------
    // INTERACTOR CALLS
    // ------------------------------------------------------------
    // MARK: - Interactor Calls
    private func getCompanyData(){
        let request = CompanyDetail.LoadCompanyData.Request()
        self.interactor?.loadCompanyData(request: request)
    }
    
    private func getStationData(){
        self.viewLoading.isHidden = false
        
        let request = CompanyDetail.LoadStationData.Request()
        self.interactor?.loadStationData(request: request)
    }
    
    // ------------------------------------------------------------
    // IBACTIONS
    // ------------------------------------------------------------
    // MARK: - IBActions
    @IBAction func tappedOnRefresh(_ sender: Any) {
        getStationData()
    }
    
    // ------------------------------------------------------------
    // TABLEVIEW RELATED
    // ------------------------------------------------------------
    // MARK: - Tableview Related
    private func setupTableViewDatasource(){
        self.tableDataSource = StationDataSource(tableView: self.tableViewStations){
            (tableView, indexPath, station) in
            
            // Avoids crashes and guarantees correct type of cell
            guard let cell = tableView.dequeueReusableCell(withIdentifier: Constants.ViewId.StationCellId, for: indexPath) as? StationCell else{
                return UITableViewCell()
            }
            
            cell.configStationCell(name: station.name,
                                   freeBikes: station.availableBikes,
                                   freeSlots: station.emptySlots,
                                   updatedTime: station.timestamp,
                                   location: station.coordinates)
            return cell
        }
         
        self.tableViewStations.dataSource = self.tableDataSource
    }
    
    private func applySnapshot(animatingDifferences: Bool = true) {
        
        var snapshot = StationSnapshot()
        snapshot.appendSections([0]) // Single unnamed section
        snapshot.appendItems( self.displayableStations )
        
        self.tableDataSource.apply(snapshot, animatingDifferences: animatingDifferences)
        
    }
    
}

// ------------------------------------------------------------
// PRESENTER OUTPUTS
// ------------------------------------------------------------
// MARK: - Presenter Outputs
extension CompanyDetailViewController : CompanyDetailDisplayLogic {
    func displayCompanyData(viewModel: CompanyDetail.LoadCompanyData.ViewModel){

        // If the viewmodel contains info, we show it. If it does not contain anything, it means it's the "default empty" VC, so
        // we show/hide the views accordingly
        if let title = viewModel.titleName, let city = viewModel.city , let coords = viewModel.coordinates{
            self.barButtonRefresh.isEnabled = true
            self.viewNoResults.isHidden = true
            
            self.labelCity.text = city
            self.labelCoordinates.text = coords
            self.navigationItem.title = title
            self.imageFlag.image = viewModel.flag
            
            getStationData()
            
        }else{
            self.barButtonRefresh.isEnabled = false
            self.viewNoResults.isHidden = false
            self.labelCity.text = ""
            self.labelCoordinates.text = ""
        }

    }
    
    func displayStationData(viewModel: CompanyDetail.LoadStationData.ViewModel){
        self.viewLoading.isHidden = true
        
        self.displayableStations = viewModel.stationList
        applySnapshot()
    }
    
    func displayStationError(_ error:Error){
        self.viewLoading.isHidden = true
        self.router?.routeToErrorAlert(error)
    }
}

