//
//  CompanyDetailInteractor.swift
//  MediquoApp
//
//  Created by Guillem Espejo on 05/11/2020.
//
//  This file was generated by the Guillem Espejo Clean Swift Xcode Templates
//

import Foundation

protocol CompanyDetailBusinessLogic{
    func loadCompanyData(request: CompanyDetail.LoadCompanyData.Request)
    func loadStationData(request: CompanyDetail.LoadStationData.Request)
}

protocol CompanyDetailDataStore{
    var network: Network? { get set }
    var companyName: String? { get set }
}

class CompanyDetailInteractor: CompanyDetailBusinessLogic, CompanyDetailDataStore{
    var presenter: CompanyDetailPresentationLogic?
    var worker: CompanyDetailWorker?
    
    var network: Network?
    var companyName: String?
    var stationList: [Station] = []
    
    // ------------------------------------------------------------
    // INIT-DEINIT
    // ------------------------------------------------------------
    // MARK: - Init-Deinit
    init( presenter: CompanyDetailPresentationLogic?, worker: CompanyDetailWorker? = CompanyDetailWorker() ){
        self.presenter = presenter
        self.worker = worker
    }

    // ------------------------------------------------------------
    // BUSINESS LOGIC
    // ------------------------------------------------------------
    // MARK: - Business Logic
    func loadCompanyData(request: CompanyDetail.LoadCompanyData.Request){
        let response = CompanyDetail.LoadCompanyData.Response(network: self.network,companyName:companyName)
        presenter?.presentCompanyData(response: response)
    }
    
    func loadStationData(request: CompanyDetail.LoadStationData.Request){
        
        guard let network = self.network else{
            self.presenter?.presentStationError( MediquoError.wrongEndpoint )
            return
        }
        
        self.worker?.loadStations(from: network, completion: { [weak self] (result) in
            switch result{
                case .success(let stationData):
                    self?.stationList = stationData
                    let response = CompanyDetail.LoadStationData.Response(stations: stationData)
                    self?.presenter?.presentStationData(response: response)

                case .failure(let error):
                    self?.presenter?.presentStationError(error)
            }
        })
        
    }
}
