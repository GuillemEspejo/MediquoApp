//
//  CompanyDetailPresenter.swift
//  MediquoApp
//
//  Created by Guillem Espejo on 05/11/2020.
//
//  This file was generated by the Guillem Espejo Clean Swift Xcode Templates
//

import UIKit
import FlagKit

protocol CompanyDetailPresentationLogic{
    func presentCompanyData(response: CompanyDetail.LoadCompanyData.Response)
    func presentStationData(response: CompanyDetail.LoadStationData.Response)
    func presentStationError(_ error:Error)
}

class CompanyDetailPresenter: CompanyDetailPresentationLogic{
    weak var viewController: CompanyDetailDisplayLogic?
    
    // ------------------------------------------------------------
    // INIT-DEINIT
    // ------------------------------------------------------------
    // MARK: - Init-Deinit
    init(viewController: CompanyDetailDisplayLogic?) {
        self.viewController = viewController
    }

    // ------------------------------------------------------------
    // PRESENTATION LOGIC
    // ------------------------------------------------------------
    // MARK: - Presentation Logic
    func presentCompanyData(response: CompanyDetail.LoadCompanyData.Response){
        
        if let network = response.network {
            let companyName = response.companyName ?? Resources.Localizable.NA
            let titleName = String(format: Resources.Localizable.CompanyNetworkName , companyName , network.name)
            let city = network.location.city
            let flag = UIImage(named: network.location.country,
                               in: FlagKit.assetBundle,
                               compatibleWith: nil)
            
            let coordinates = String(format: Resources.Localizable.CoordinatesFormat , network.location.latitude , network.location.longitude)
            
            let viewModel = CompanyDetail.LoadCompanyData.ViewModel(network: network,
                                                                    titleName: titleName,
                                                                    city: city,
                                                                    flag: flag,
                                                                    coordinates:coordinates)
            viewController?.displayCompanyData(viewModel: viewModel)

        }else{
            let viewModel = CompanyDetail.LoadCompanyData.ViewModel()
            viewController?.displayCompanyData(viewModel: viewModel)
        }
        
    }
    
    func presentStationData(response: CompanyDetail.LoadStationData.Response){
        var displayableStations = [CompanyDetail.DisplayableStation]()
        for station in response.stations {
            let coordinates = String(format:Resources.Localizable.CoordinatesFormat , station.latitude, station.longitude)
            let timestamp = convertDateFormatter(date:station.timestamp)
            let displayableStation = CompanyDetail.DisplayableStation(name: station.name,
                                                                      timestamp: timestamp,
                                                                      coordinates: coordinates,
                                                                      availableBikes: station.freeBikes,
                                                                      emptySlots: station.emptySlots)
            displayableStations.append(displayableStation)
        }
        
        // Sort by name
        let sortedArray = displayableStations.sorted { (a, b) -> Bool in
            let nameA = a.name ?? ""
            let nameB = b.name ?? ""
            return nameA < nameB
        }
        
        let viewModel = CompanyDetail.LoadStationData.ViewModel(stationList: sortedArray)
        viewController?.displayStationData(viewModel: viewModel)
    }
    
    func presentStationError(_ error:Error){
        viewController?.displayStationError(error)
    }
    
    // ------------------------------------------------------------
    // PRIVATE METHODS
    // ------------------------------------------------------------
    // MARK: - Private methods
    private func convertDateFormatter(date: String) -> String {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"
        dateFormatter.timeZone = NSTimeZone(name: "UTC") as TimeZone?
        dateFormatter.locale = Locale.current
        let convertedDate = dateFormatter.date(from: date)
        
        // Try to format full UTC Zulu time
        if dateFormatter.date(from: date) == nil {
            // If failed, try second approach
        }

        guard dateFormatter.date(from: date) != nil else {
            print("ERROR FORMATTING DATE: Couldn't reformat original date to current Locale")
            return date
        }

        dateFormatter.dateStyle = .medium
        dateFormatter.timeStyle = .medium
        let timeStamp = dateFormatter.string(from: convertedDate!)
        
        return timeStamp

    }

}
